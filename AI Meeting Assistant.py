# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MqGVSOEJgU8spagMSki9rXA1uabNNARt

**MODEL 2**

**2. Meeting Summarizer + Action Tracker for Indian Teams**
"""

# üîÑ End-to-End Meeting Assistant

# ‚úÖ Step 1: Install required libraries
!pip install -q git+https://github.com/openai/whisper.git
!pip install -q requests fpdf cryptography

import whisper
import os
import json
import re
import requests
import shutil
from fpdf import FPDF
from cryptography.fernet import Fernet
from google.colab import files
from IPython.display import display, Audio

# ‚úÖ Step 2: Upload audio file
print("‚¨ÜÔ∏è Upload your meeting audio file (.mp3/.wav)")
uploaded = files.upload()
audio_file = list(uploaded.keys())[0]

# ‚úÖ Step 3: Transcribe using Whisper
model = whisper.load_model("base")
print(f"\U0001F50A Transcribing: {audio_file} ...")
result = model.transcribe(audio_file)
transcript = result['text']

# ‚úÖ Step 4: Display transcript
print("\n\U0001F4DD Transcript:")
print(transcript)

# ‚úÖ Step 5: Rule-based Task Extractor (Fallback if LLM not used)
def extract_tasks(transcript):
    lines = transcript.split(". ")
    tasks = []
    for line in lines:
        if re.search(r'(?i)\b(should|must|need to|assign|complete|by|deadline|responsible for|follow up|send|update)\b', line):
            tasks.append(line.strip())
    return tasks

# ‚úÖ Step 6: Summary + Tasks (LLM fallback to rule-based)
MISTRAL_API_KEY = "YOUR_MISTRAL_API_KEY"
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"

import re
import requests

def generate_summary_and_tasks(transcript_text):
    try:
        headers = {
            "Authorization": f"Bearer {MISTRAL_API_KEY}",
            "Content-Type": "application/json"
        }
        prompt = f"""
    Act as an AI meeting assistant. Your task is to deeply analyze the provided transcript of a multi-lingual meeting (could be in English, Hindi, or Tamil) and extract structured insights. Return the following:

        1. **Concise Summary**: A 3-4 line overview highlighting the main discussion themes.
        2. **Action Points**:
            - Bullet points listing key tasks
            - Include responsible individuals (if mentioned)
            - Add deadlines or due dates (if mentioned)
            - Group them by categories if possible (e.g., technical, admin, client-related)
        3. **Meeting Sentiment (optional)**: Was the tone collaborative, urgent, confused, etc.?
        4. **Critical Decisions Taken** (if any): Mention any conclusions or approvals.

        Transcript:
        {transcript_text}
        """

        data = {
            "model": "mistral-medium",
            "messages": [
                {"role": "user", "content": prompt}
            ],
            "temperature": 0.3
        }

        response = requests.post(MISTRAL_API_URL, headers=headers, json=data)
        result = response.json()
        return result['choices'][0]['message']['content']
    except Exception as e: # Catching a broader exception to handle potential API errors
        print(f"Error during LLM processing: {e}") # Print the actual error
        return "\n\nRule-based Tasks:\n" + "\n".join(extract_tasks(transcript_text))

print("\n\U0001F9D0 Generating summary and tasks...")
output = generate_summary_and_tasks(transcript) # Changed transcription to transcript
print("\n‚úÖ Summary + Tasks:")
print(output)

# ‚úÖ Step 7: Save to TXT, PDF, CSV
with open("meeting_summary_tasks.txt", "w", encoding="utf-8") as f:
    f.write("Transcript:\n" + transcript + "\n\n")
    f.write("Summary + Tasks:\n" + output)

# Save as CSV
with open("meeting_summary_tasks.csv", "w", encoding="utf-8") as f:
    f.write("Task\n")
    for line in output.split("\n"):
        if line.strip().startswith("-"):
            f.write(line.strip("- ").strip() + "\n")

!pip install fpdf

# Save as PDF
from fpdf import FPDF
from google.colab import files

pdf = FPDF()
pdf.add_page()
pdf.set_font("Arial", size=12)
pdf.multi_cell(0, 10, "Transcript:\n" + transcript + "\n\nSummary + Tasks:\n" + output)
pdf.output("meeting_summary_tasks.pdf")

files.download("meeting_summary_tasks.txt")
files.download("meeting_summary_tasks.csv")
files.download("meeting_summary_tasks.pdf")

!pip install cryptography

# ‚úÖ Step 8: Encrypt Output Files
from cryptography.fernet import Fernet
import os

key = Fernet.generate_key()
cipher = Fernet(key)

for file_name in ["meeting_summary_tasks.txt", "meeting_summary_tasks.csv", "meeting_summary_tasks.pdf"]:
    with open(file_name, "rb") as f:
        encrypted_data = cipher.encrypt(f.read())
    with open(file_name + ".enc", "wb") as ef:
        ef.write(encrypted_data)
    os.remove(file_name)  # Delete original

print("\nüîê Files encrypted using AES-256 equivalent (Fernet). Key:")
print(key.decode())

# ‚úÖ Step 9: Delete Temp Cache
if os.path.exists(audio_file):
    os.remove(audio_file)
print("\n‚ùå Audio file deleted from cache.")

"""**A smart meeting assistant system that:

Records live or uploaded meetings

Transcribes audio (speech-to-text)

Summarizes the content (e.g., meeting minutes)

Extracts tasks and deadlines

Sends summaries and tasks to users via their preferred platforms

‚úÖ It helps teams avoid manual note-taking, keeps meetings actionable, and improves follow-up.

**

üì§ Export Options
‚úÖ Summary + Tasks saved as .txt, .csv, and .pdf

‚úÖ Auto-download in Colab

üîí Security & Privacy
‚úÖ AES-256 encryption (Fernet)

‚úÖ Cache audio auto-deletion after processing

‚úÖ Encrypted file output with downloadable key

üß† Improved Task Extraction
‚úÖ Fallback rule-based extractor using regex if LLM API fails

üñ•Ô∏è Offline Support Acknowledgement
‚úÖ Note included about using small/offline models (like TinyLlama) for summary generation in local environments
"""